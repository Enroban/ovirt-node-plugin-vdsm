#!/usr/bin/python
# -*- coding: utf-8 -*-
#
# Copyright (C) 2015 Red Hat, Inc.
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; version 2 of the License.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
# MA  02110-1301, USA.  A copy of the GNU General Public License is
# also available at http://www.gnu.org/copyleft/gpl.html.
import sys
import ovirtnode.ovirtfunctions as _functions

from ovirt.node import log, utils
from ovirt.node.config.defaults import SSH
from ovirt.node.setup.vdsm import engine_page
from ovirt.node.utils import system


class AutoRegister(object):

    def __init__(self):
        # Log: /var/log/ovirt-node.log
        self.logger = log.getLogger(__name__)

        # For autoinstall using check-fqdn = False as previous autoinstall
        # doesn't check CA cert
        self.vdsm_tool_cmd = "vdsm-tool register --check-fqdn False "

        self.kargs = None
        self.mserver = None
        self.mserver_port = None

    def _is_karg_set(self, key, debug=True):
        """
        Check if the key was used as kernel argument

        Arguments:
        key   -- The key to look for
        debug -- Debugging prints

        Returns: the key or False
        """
        if key in self.kargs and len(self.kargs[key]) > 0:
            if debug:
                self.logger.info("autoinstall: kernel argument "
                                 "[%s] is set [%s]" % (key, self.kargs[key]))
            return self.kargs[key]

        return False

    def is_node_registered(self):
        """
        Validate OVIRT_NODE_AUTO_REGISTER in /etc/default/ovirt
        if already set, no need to execute auto-register

        Return True or False
        """
        self.logger.info("== autoinstall: validating /etc/default/ovirt")

        with open('/etc/default/ovirt', 'r') as f:
            for line in f:
                if "OVIRT_NODE_AUTO_REGISTER=True" in line:
                    return True

        return False

    def get_kargs(self):
        """
        Find in the boot kernel arguments from /var/log/messages,
        the autoinstall keys that start with "management_"

        Return a dict with the keys
        """
        self.logger.info("== autoinstall: validating kernel arguments ==")
        key_word_karg = "Command line"
        with open('/var/log/messages', 'r') as f:
            for line in f:
                if key_word_karg in line and "management_server" in line:
                    self.kargs = system.kernel_cmdline_arguments(
                        line.split(key_word_karg)[1]
                    )
                    self.logger.info("autoinstall kargs: {k}".format(
                        k=self.kargs)
                    )
                    break

        return self.kargs

    def get_management_server(self):
        """
        If management_server exist in the kernel argument
        add it to the auto-register script call
        """
        if self._is_karg_set("management_server"):
            self.mserver = self.kargs["management_server"]
            self.vdsm_tool_cmd += "--engine-fqdn {s} ".format(
                                  s=self.mserver)
        else:
            raise RuntimeError("management_server karg is required!")

    def get_management_server_port(self):
        """
        If management_server_port exist in the kernel argument
        add it to the auto-register script call
        """
        if self._is_karg_set("management_server_port"):
            if not self._is_karg_set("management_server", debug=False):
                raise RuntimeError("management_server_port requires"
                                   " to set management_server key too!")
            else:
                self.mserver_port = self.kargs["management_server_port"]
                self.vdsm_tool_cmd += "--engine-https-port {p} ".format(
                                      p=self.mserver_port)

    def get_management_server_fingerprint(self):
        """
        If management_server_fingerprint exist in the kernel argument
        add it to the auto-register script call
        """
        if self._is_karg_set("management_server_fingerprint"):
            if not self._is_karg_set("management_server", debug=False):
                raise RuntimeError("management_server_fingerprint requires"
                                   " to set management_server key too!")
            else:
                self.vdsm_tool_cmd += "--fingerprint {f}".format(
                    f=self.kargs["management_server_fingerprint"]
                )

    def write_changes(self):
        """
        Write OVIRT_MANAGEMENT and OVIRT_MANAGEMENT_PORT
        """
        # Updating OVIRT_MANAGEMENT_SERVER in /etc/default/ovirt

        if self.mserver_port is not None:
            engine_page.VDSM().update(server=self.mserver,
                                      port=self.mserver_port,
                                      cert_path="/etc/pki/ovirt-engine/ca.pem")
        else:
            engine_page.VDSM().update(server=self.mserver,
                                      cert_path="/etc/pki/ovirt-engine/ca.pem")

        with open('/etc/default/ovirt', 'a') as f:
            f.write("OVIRT_NODE_AUTO_REGISTER=True")

    def pass_sysadm(self):
        """
        Check if keys: rhevm_admin_password or engine_admin_password is set
        if it's present, set root passwd and enable SSH daemon

        Note: To generate password to use with rhevm_admin_password and
              engine_admin_password you must execute: openssl passwd -1
        """
        admin_pwd = None
        if self._is_karg_set("rhevm_admin_password"):
            admin_pwd = "rhevm_admin_password"

        if self._is_karg_set("engine_admin_password"):
            admin_pwd = "engine_admin_password"

        if admin_pwd:
            _functions.unmount_config("/etc/shadow")
            _functions.unmount_config("/etc/passwd")
            engine_page.execute_cmd("/usr/sbin/usermod -p %s root" %
                                    self.kargs[admin_pwd])

            engine_page.execute_cmd("chage -E -1 root")
            utils.fs.Config().persist("/etc/shadow")
            utils.fs.Config().persist("/etc/passwd")
            self.logger.info("autoinstall: Password updated for user root!")

            # Enable SSHD
            SSH().update(pwauth=True)
            SSH().commit()

    def execute_registration(self):
        self.logger.info("autoinstall: vdsm-tool register command")
        self.logger.info("{c}".format(c=self.vdsm_tool_cmd))
        out, ret = engine_page.execute_cmd(self.vdsm_tool_cmd)
        self.logger.info("autoinstall: vdsm-tool ret: {o}".format(o=out))
        if ret != 0:
            raise RuntimeError("autoinstall: vdsm-tool register FAILED!")


def main():
    reg = AutoRegister()
    reg.logger.info("=======================================")
    reg.logger.info("Auto-Registering the node")
    reg.logger.info("=======================================")

    if not reg.is_node_registered():
        reg.logger.info("OVIRT_NODE_AUTO_REGISTER is NOT set, "
                        "starting auto-register..")
        if reg.get_kargs() is None:
            reg.logger.info(
                "autoinstall: Not found management_server, "
                "management_server_port or "
                "management_server_fingerprint "
                "in the kernel argument"
            )
            return 0
    else:
        reg.logger.info(
            "No need to auto-register, OVIRT_NODE_AUTO_REGISTER is set!"
        )
        return 0

    try:
        reg.get_management_server()
        reg.get_management_server_port()
        reg.get_management_server_fingerprint()
        reg.execute_registration()
        reg.write_changes()
    except:
        reg.logger.exception("Unable to auto-register! "
                             "Full log: /var/log/vdsm/register.log")
        return 1

    reg.logger.info("== autoinstall successfully finished ==")
    return 0

if __name__ == "__main__":
    sys.exit(main())
